{"version":3,"file":"SubscriptionsClient.js","sources":["../src/SubscriptionsClient.js"],"sourcesContent":["// @flow\n\nimport * as withAbsintheSocket from \"@absinthe/socket\";\nimport {requestFromCompat} from \"@jumpn/utils-graphql\";\nimport {Socket as PhoenixSocket} from \"phoenix\";\n\nimport type {\n  AbsintheSocket,\n  GqlRequest,\n  SubscriptionPayload\n} from \"@absinthe/socket\";\nimport type {GqlRequestCompat} from \"@jumpn/utils-graphql/dist/types\";\nimport type {SocketOpts} from \"phoenix\";\n\ntype SubscriptionCallback = (\n  error: ?Error,\n  payload?: SubscriptionPayload<any>\n) => void;\n\nconst observe = (subscriptionsClient, notifier, callback) =>\n  withAbsintheSocket.observe(subscriptionsClient.absintheSocket, notifier, {\n    onAbort: callback,\n    onResult: result => callback(null, result)\n  });\n\nconst generateRequestKey = subscriptionsClient => {\n  subscriptionsClient.requestsCount += 1;\n\n  return String(subscriptionsClient.requestsCount);\n};\n\nconst storeRequest = (subscriptionsClient, request) => {\n  const requestKey = generateRequestKey(subscriptionsClient);\n\n  subscriptionsClient.requests.set(request, requestKey);\n\n  return requestKey;\n};\n\nconst storeRequestIfNeeded = (subscriptionsClient, request) => {\n  const requestKey = subscriptionsClient.requests.get(request);\n\n  return requestKey !== undefined\n    ? requestKey\n    : storeRequest(subscriptionsClient, request);\n};\n\nconst findNotifier = (subscriptionsClient, request) =>\n  subscriptionsClient.absintheSocket.notifiers.find(\n    notifier => notifier.request === request\n  );\n\n// eslint-disable-next-line consistent-return\nconst findRequest = (subscriptionsClient, requestKey) => {\n  for (const [request, key] of subscriptionsClient.requests.entries()) {\n    if (key === requestKey) return request;\n  }\n};\n\nconst cancel = (subscriptionsClient, notifier) => {\n  withAbsintheSocket.cancel(subscriptionsClient.absintheSocket, notifier);\n\n  subscriptionsClient.requests.delete(notifier.request);\n};\n\nexport default class SubscriptionsClient {\n  absintheSocket: AbsintheSocket;\n\n  requestsCount = 0;\n\n  requests: Map<GqlRequest<any>, string>;\n\n  constructor(socketUrl: string, options: SocketOpts) {\n    this.absintheSocket = withAbsintheSocket.create(\n      new PhoenixSocket(socketUrl, options)\n    );\n\n    this.requests = new Map();\n  }\n\n  close() {\n    this.absintheSocket.phoenixSocket.disconnect();\n  }\n\n  subscribe(\n    requestCompat: GqlRequestCompat<any>,\n    callback: SubscriptionCallback\n  ): string {\n    const notifier = withAbsintheSocket.send(\n      this.absintheSocket,\n      requestFromCompat(requestCompat)\n    );\n\n    const requestKey = storeRequestIfNeeded(this, notifier.request);\n\n    observe(this, notifier, callback);\n\n    return requestKey;\n  }\n\n  unsubscribe(requestKey: string) {\n    const request = findRequest(this, requestKey);\n\n    if (request) {\n      const notifier = findNotifier(this, request);\n\n      if (notifier) cancel(this, notifier);\n    }\n  }\n\n  unsubscribeAll() {\n    this.absintheSocket.notifiers.forEach(notifier => cancel(this, notifier));\n  }\n}\n"],"names":["observe","subscriptionsClient","notifier","callback","withAbsintheSocket","absintheSocket","onAbort","onResult","result","generateRequestKey","requestsCount","String","storeRequest","request","requestKey","requests","set","storeRequestIfNeeded","get","undefined","findNotifier","notifiers","find","findRequest","entries","key","cancel","delete","SubscriptionsClient","socketUrl","options","PhoenixSocket","Map","phoenixSocket","disconnect","requestCompat","requestFromCompat","forEach"],"mappings":"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"}